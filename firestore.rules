// Firestore rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function isOwner() { return isSignedIn() && request.auth.uid == resource.data.ownerUid; }
    function isOwnerForCreate() { return isSignedIn() && request.resource.data.ownerUid == request.auth.uid; }
    function activityOwned() {
      return isSignedIn() && (
        (resource.data.ownerUid != null && resource.data.ownerUid == request.auth.uid) ||
        (resource.data.userId != null && resource.data.userId == request.auth.uid)
      );
    }

    match /goals/{id}     { allow create: if isOwnerForCreate(); allow read, update, delete: if isOwner(); }
    match /okrs/{id}      { allow create: if isOwnerForCreate(); allow read, update, delete: if isOwner(); }
    // Allow updates when either the existing or incoming doc asserts ownership
    match /tasks/{id} {
      allow create: if isOwnerForCreate();
      allow read, delete: if isOwner();
      allow update: if isSignedIn() && (
        (resource.data.ownerUid == request.auth.uid) ||
        (request.resource.data.ownerUid == request.auth.uid)
      );
    }
    match /stories/{id} {
      allow create: if isOwnerForCreate();
      allow read, delete: if isOwner();
      allow update: if isSignedIn() && (
        (resource.data.ownerUid == request.auth.uid) ||
        (request.resource.data.ownerUid == request.auth.uid)
      );
    }
    match /resources/{id} { allow create: if isOwnerForCreate(); allow read, update, delete: if isOwner(); }
    match /trips/{id}     { allow create: if isOwnerForCreate(); allow read, update, delete: if isOwner(); }
    match /theme_colors/{id} { allow create: if isOwnerForCreate(); allow read, update, delete: if isOwner(); }
    // Per-user global themes document (settings page)
    match /global_themes/{uid} {
      // Allow a user to read/write only their own theme settings doc
      allow read, write: if isSignedIn() && request.auth.uid == uid;
    }
    
    // Core v3.0.8 collections with enhanced logging
    match /sprints/{id}   { allow create: if isOwnerForCreate(); allow read, update, delete: if isOwner(); }
    match /calendar_blocks/{id} { allow create: if isOwnerForCreate(); allow read, update, delete: if isOwner(); }
    match /digests/{id}   { allow create: if isOwnerForCreate(); allow read, update, delete: if isOwner(); }
    match /metrics_hrv/{id} { allow create: if isOwnerForCreate(); allow read, update, delete: if isOwner(); }
    match /metrics_workouts/{id} { allow create: if isOwnerForCreate(); allow read, update, delete: if isOwner(); }
    match /metrics_nutrition/{id} { allow create: if isOwnerForCreate(); allow read, update, delete: if isOwner(); }
    match /taxonomies/{id} { allow read: if isSignedIn(); allow create: if isOwnerForCreate(); allow update, delete: if isOwner(); }
    match /activity_stream/{id} {
      allow create: if isOwnerForCreate();
      allow read: if activityOwned();
      allow update, delete: if activityOwned();
    }
    // Per-user integration logs (e.g., google/strava/monzo)
    match /integration_logs/{id} { allow create: if isOwnerForCreate(); allow read, update, delete: if isOwner(); }
    match /work_projects/{id} { allow create: if isOwnerForCreate(); allow read, update, delete: if isOwner(); }
    match /personal_lists/{id} { allow create: if isOwnerForCreate(); allow read, update, delete: if isOwner(); }
    match /steam/{id} { allow create: if isOwnerForCreate(); allow read, update, delete: if isOwner(); }

    // Travel map entries (per-user visits/locations)
    match /travel/{id} {
      allow create: if isOwnerForCreate();
      allow read, update, delete: if isOwner();
    }

    // Finance collections
    match /finance_budgets/{uid} {
      // Per-user finance budget doc keyed by uid
      allow create: if isSignedIn() && request.auth.uid == uid;
      allow read:   if isSignedIn() && request.auth.uid == uid;
      allow update: if isSignedIn() && request.auth.uid == uid;
      allow delete: if isSignedIn() && request.auth.uid == uid;
    }
    match /monzo_budget_summary/{uid} {
      // Per-user Monzo summary doc keyed by uid
      allow create: if isSignedIn() && request.auth.uid == uid;
      allow read:   if isSignedIn() && request.auth.uid == uid;
      allow update: if isSignedIn() && request.auth.uid == uid;
      allow delete: if isSignedIn() && request.auth.uid == uid;
    }
    match /monzo_transactions/{id} {
      // Individual transaction rows carry ownerUid
      // Create: enforce ownerUid equals request.auth.uid
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      // Read/Delete: owner only
      allow read, delete: if isSignedIn() && request.auth.uid == resource.data.ownerUid;
      // Update: owner only and ownerUid must be immutable
      allow update: if isSignedIn() && request.auth.uid == resource.data.ownerUid &&
                    request.resource.data.ownerUid == resource.data.ownerUid;
    }

    // Per-user goal alignment summary for finance dashboard
    match /monzo_goal_alignment/{uid} {
      allow create: if isSignedIn() && request.auth.uid == uid;
      allow read:   if isSignedIn() && request.auth.uid == uid;
      allow update: if isSignedIn() && request.auth.uid == uid;
      allow delete: if isSignedIn() && request.auth.uid == uid;
    }

    // New scheduler-related collections
    match /themes/{id} { allow create: if isOwnerForCreate(); allow read, update, delete: if isOwner(); }
    match /chores/{id} { allow create: if isOwnerForCreate(); allow read, update, delete: if isOwner(); }
    match /routines/{id} { allow create: if isOwnerForCreate(); allow read, update, delete: if isOwner(); }
    // Alias for blocks in new schema (calendar_blocks already exists separately)
    match /blocks/{id} { allow create: if isOwnerForCreate(); allow read, update, delete: if isOwner(); }
    // Scheduled instances produced by the planner
    match /scheduled_instances/{id} {
      allow create: if isOwnerForCreate();
      allow read, update, delete: if isOwner();
    }
    // Planner job coordination (per-user documents keyed by userId)
    match /planning_jobs/{id} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read: if isSignedIn() && (
        resource.data.ownerUid == request.auth.uid ||
        resource.data.userId == request.auth.uid
      );
      allow update, delete: if isSignedIn() && (
        resource.data.ownerUid == request.auth.uid ||
        resource.data.userId == request.auth.uid ||
        request.resource.data.userId == request.auth.uid
      );
    }

    // Archive of completed tasks (server-managed)
    match /tasks_archive/{id} {
      allow create: if isOwnerForCreate();
      allow read, update, delete: if isOwner();
    }

    // Temporary compatibility for legacy writers still using /activity
    // Remove once all clients have migrated to activity_stream.
    match /activity/{id} {
      allow create: if isOwnerForCreate();
      allow read, update, delete: if isOwner();
    }

    // Daily summary + reports (owner-scoped by userId)
    match /daily_summaries/{id} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }
    match /data_quality_reports/{id} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // Automation status/runs (owner-scoped by userId; these docs do not carry ownerUid)
    match /automation_status/{id} {
      allow create, update: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }
    match /automation_runs/{id} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // Plans -> per-day document with assignments subcollection
    match /plans/{dayKey} {
      match /assignments/{assignmentId} {
        allow create: if isOwnerForCreate();
        allow read, update, delete: if isOwner();
      }
    }

    // App usage tracking from Android/TV clients
    match /app_usage_events/{id} {
      allow create: if isOwnerForCreate();
      allow read, update, delete: if isOwner();
    }

    // Per-user application restriction lists (e.g., blocked packages on TV)
    match /app_restrictions/{uid} {
      allow read, write: if isSignedIn() && request.auth.uid == uid;
    }

    // Test login tokens - DENY in production
    match /test_login_tokens/{id} { allow read, write: if false; }

    // Habits with enhanced logging support
    match /habits/{id} {
      allow create: if isOwnerForCreate();
      allow read, update, delete: if isOwner();

      // Habit Entries as a subcollection
      match /habitEntries/{entryId} {
        allow create: if isOwner(); // Owner of the parent habit can create entries
        allow read, update, delete: if isOwner(); // Owner of the parent habit can manage entries
      }
    }

    // Per-user integration profile with v3.0.8 support
    match /profiles/{uid} {
      allow read, update, delete: if isSignedIn() && request.auth.uid == uid;
      allow create: if isSignedIn() && request.auth.uid == uid && request.resource.data.ownerUid == uid;
    }

    // Per-user app settings
    match /user_settings/{uid} {
      allow read, write: if isSignedIn() && request.auth.uid == uid;
    }
    // Per-user theme settings (legacy hook)
    match /theme_settings/{uid} {
      allow read, write: if isSignedIn() && request.auth.uid == uid;
    }

    // No client access to tokens by default (server-only)
  }
}
