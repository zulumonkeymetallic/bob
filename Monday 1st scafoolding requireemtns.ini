got it — here’s a single, consolidated, implementation-ready master spec that includes everything we discussed (v3.1.1 baseline + v3.4 roadmap), the new Goals Table “Time Allocated This Week” enhancement, and a full UI mock plan with menu/navigation so the coding AI can scaffold all screens first, then wire up Firestore.

————————————————————————————————————————
BOB – Master Handoff (v3.1.1 → v3.4 + UI Mock Plan)

Owner: Jim Donnelly
Date: September 1, 2025
Audience: Development AI / Code Review Agent (“AO”)
Purpose: Single source of truth for current defects, requirements, schema deltas, new features, UI scaffolding (mock UI first), and plumbing into Firestore. Supersedes all prior fragments.

————————————————————————————————————————
	1.	Executive Context

BOB is a Firebase Firestore–based productivity platform: Goals → Stories → Tasks, Sprints, Calendar Blocks, Integrations, Routines.
v3.0.7 delivered: 2-D Sprint Planner, Theme colour inheritance, Pragmatic Drag & Drop.
v3.0.8 introduced regressions (entities not surfacing, side-panels gone).
v3.1.0: Global Activity Stream + UI Tracking.
v3.1.1: Fix P1s, Enhanced Logging, Calendar UI foundation, Routines/Chores.
v3.4 (this doc): Goal Visualization (roadmap view), CRUD parity, Goals Table “Time Allocated This Week”, and full UI mock scaffolding.

————————————————————————————————————————
2) Versioning

App version: v3.1.1
This document: v3.1.1 → v3.4 Master Handoff

Runtime observations (captured at v3.1.1):
• Global Activity Stream & UI Tracking active; auth listener OK (user: donnelly.jim@gmail.com).
• Sprint listener returns 4 sprints but throws missing index errors and appears to be double-mounted (duplicate listeners).

————————————————————————————————————————
3) 🔴 P1 Defects (Blockers)
	0.	NEW – Activity Stream write failing (console flood)
Symptoms: Firestore addDoc rejected: “Unsupported field value: undefined (found in field referenceNumber in activity_stream/…)” while tracking goal views (e.g., “Run an Iron Man”).
Root cause: code writes referenceNumber undefined; canonical field across app is ref. No validation/fallback before addDoc.
Immediate fixes:
• Map referenceNumber = entity.ref; if absent, fallback “GOAL-”.
• Validate payload; dual-write ref and referenceNumber during transition.
• Throttle duplicate error logs; debounce repeated view writes per entity (≥2s).
Structural fixes: shared activity builder + schema validation (no undefined fields), unit tests for missing ref/referenceNumber.
Acceptance: one valid activity per view; no console flood; all activity docs contain ref.
	1.	Boards & Tables not syncing with DB
Entities exist in Firestore but not visible in Modern Tables, Kanban, or Planner. Fix listeners, query ordering (rank), and schema bindings (ref, themeId, rankByCell).
	2.	Side-panel editing missing
Restore CRUD side-panels for Goals/Stories/Tasks with instant persistence.
	3.	Ref numbers not displayed
Show GOAL-###, STRY-###, TASK-### on rows, cards, side-panels.
	4.	Sprint loading spinner stuck
Missing index + duplicate listeners; causes perceived infinite loading. Add index, fix lifecycle, show empty state when 0 sprints.
	5.	Cannot add Stories to Goals
createStory(goalId) fails silently or doesn’t persist goalId/ref/rank.
	6.	Notes not persisting/rendering
Reported payload written but not shown; standardize notes path, ensure rules, subscribe, and render.
	7.	Inline tracking “Enter” does not save
Enter in any inline editor must commit to Firestore (not only blur).

————————————————————————————————————————
4) 🟡 P2 Issues

• DnD persistence inconsistent (rank lost after refresh)
• Planner row expansion not persisted (ui_state.plannerRowExpansion)
• Theme colour cascade incomplete for new entities
• Listener error handling inadequate (silent failures)

————————————————————————————————————————
5) 🟢 P3 Issues

• Accessibility gaps (Planner keyboard flows, screen-reader)
• Undo toast missing in Goals/Tasks tables
• Logs not surfaced clearly in UI

————————————————————————————————————————
6) Priority Requirements (Consolidated, v3.1.1)

• Sprint Planner (2-D matrix: columns = Sprints; rows = Theme → Goal → Subgoal; cells = Stories; DnD vertical/horizontal/in-cell)
• Current Sprint Kanban (lanes from profiles.kanbanLaneLabels; story card → inline task subgrid)
• Calendar Blocking & AI Scheduling (Google bidirectional sync; GCal-style Week/Day grid; blocks: storyId?, goalId?, habitId?, subTheme?, googleEventId?, themeId?, isAiGenerated?, conflictVersion?, supersededBy?)
• Daily LLM Digest (06:30; tasks due, focus stories, calendar blocks, sprint pulse, narrative)
• Health & Nutrition integrations (Strava, Runna, MyFitnessPal; metrics_hrv, metrics_workouts, metrics_nutrition)
• iOS Reminders sync (reminderId; two-way; latest edit wins; preserve TASK-###)
• Mobile “Important Now” (overdue, due today, high importance, current sprint tasks; habits strip)
• Selenium CI + side-door auth (test_login_tokens; /test-login?token=)
• Theme colour inheritance (theme_settings; AA contrast; useThemeColor())
• Pragmatic Drag & Drop refactor (fractional ranks; keyboard/touch; undo)
• Enhanced Logging & Telemetry (?debug=db; DbLog for read/write/update/delete, listen_open/snapshot/error; optional audit_logs staging)
• Routines & Chores (routines, routine_items, routine_logs; recurrence; streaks; optional blocks)

————————————————————————————————————————
7) New Enhancement (v3.4): Goals Table — “Time Allocated This Week”

Purpose: Show, per Goal, hours and % of the current week allocated via calendar blocks (direct Goal-level blocks and Story-linked blocks), with theme/subtheme breakdowns.

Data model deltas:
• calendar_blocks.goalId? (optional but recommended)
• calendar_blocks.durationMinutes? (denormalised)
• weekly_goal_time (ownerUid, weekStartISO [Monday Europe/London], goalId, minutes, breakdown { themeId?, subTheme?, sources { direct, storyLinked, habitLinked } }, blockCount, updatedAt)

Indexes:
• calendar_blocks: (ownerUid, start, end) [exists], (ownerUid, goalId) new if goalId added
• weekly_goal_time: (ownerUid, weekStartISO, goalId)

Computation:
• Window: Mon 00:00 → Sun 23:59 (Europe/London). Clip overlapping blocks to window.
• Attribution order: storyId → story.goalId; else calendar_blocks.goalId. Avoid double counting.
• Exclude superseded blocks; respect cancellations via googleEventId.
• Percentage: minutes / totalSchedulableMinutes (default 10,080). When work-hours profile exists, use that denominator and show in tooltip.

UI – Goals Modern Table (new columns):
• Allocated (hrs): H:mm, tooltip breakdown (direct/storyLinked/habitLinked + subTheme).
• This Week %: small progress bar + label (e.g., 12%), tooltip with “X of Y hours; denominator = full week or work hours”.
• Theme/Subtheme chips with AA contrast; overflow +N in tooltip.
• Optional Target vs Actual when profiles.weeklyThemeTargets[themeId] present.

Interactions:
• Click Allocated/This Week % → right side-panel: weekly breakdown calendar of this Goal’s blocks; quick actions: Reassign to Story, Convert to Goal-level (adds goalId), Edit subTheme, Split block.
• Filters: Theme, Subtheme, Allocated > X hours, “Show only Goals with time allocated this week”.
• Inline edits persist immediately; rollups update ≤ 3s.

Acceptance:
• Table renders ≤ 1.5s with rollups; edits reflect ≤ 3s; no double counting; AA contrast good.

————————————————————————————————————————
8) Goal Visualization Module (v3.4)

Purpose: Roadmap-style timeline with calendar + sprint markers; per-Goal time bars; stories/tasks tables under each Goal card; drag Goal to shift date window and cascade planned sprints; confirmation if ≥ 3 stories change planned sprint; full activity logging; printable & shareable.

Layout:
• Top bar: Theme filter, search, zoom (Month/Quarter/Half/Year), Today, Print, Share.
• Timeline grid: calendar dates + sprint markers (hover: sprint ref/dates).
• Rows: grouped by Theme → Goals. Each row shows a Goal card (time bar) with label “[ref] Title” + progress; under-card collapsible modern tables: Stories and Tasks.

Interactions:
• Click Goal: side-panel tabs (Details; Stories [inline]; Tasks [inline]; Activity; Comments).
• Drag Goal: adjust startDate/endDate (snap granularity by zoom). On drop, compute affected stories → if ≥ 3, show confirmation modal listing STRY refs with from→to sprint; Confirm writes batch updates + activity entries; Cancel reverts.
• Drag Story between sprints (via table dropdown or sprint rail) updates plannedSprintId with activity log.

Activity Stream & Telemetry:
• Canonical field: ref; dual-write referenceNumber = ref during transition.
• Events: goal_viewed; goal_dates_changed; bulk_story_sprint_reassigned; story_sprint_changed; story_inline_edit_saved; task_inline_edit_saved; visualization_shared_link_created; visualization_printed.
• Payload: { ts, uid, entityType, entityId, ref, title, action, payload, source: “visualization”, version } (no undefined).
• ?debug=db to surface structured reads/writes/listeners; deduplicate identical errors within 5s.

Schema (adds/confirm):
• goals: startDate (ms), endDate (ms), themeId
• stories: plannedSprintId
• ui_state (per user): vizZoomLevel, vizVisibleThemes[], vizCollapsedGoals[]
• activity_stream: per validated payload above

Indexes:
• goals: (ownerUid, themeId, startDate, endDate)
• stories: (ownerUid, goalId, plannedSprintId)

Printing & Sharing:
• Print: A3 landscape CSS; legend + date footer; collapsible sections.
• Share link: GET /share/viz/{token} → filtered read-only view (scope: themes/goals; expiry supported).

Performance:
• Load ≤ 3s for 100+ Goals, 600+ Stories, 2k+ Tasks (virtualized rows; batched reads).
• DnD latency ≤ 200ms; writes ack ≤ 250ms median.

Acceptance:
• Deep link works; drag updates with confirmation; inline editing saves on Enter; all changes logged; print and share work; AA contrast OK; performance targets met.

————————————————————————————————————————
9) Schema Deltas (recap across v3.1.1 → v3.4)

Stories: ref; goalId; subGoalId?; sprintId?; plannedSprintId?; rank?; rankByLane?; rankByCell?; dragLockVersion?; themeId?; taskCount?; doneTaskCount?
Tasks: importanceScore?; isImportant?; reminderId?; rank?
Sprints: ref; objective?; status; notes?; startDate; endDate; orderIndex|rank; createdAt; updatedAt
Calendar Blocks: storyId?; goalId?; habitId?; subTheme?; googleEventId?; isAiGenerated?; conflictVersion?; supersededBy?; themeId?; durationMinutes?
Theme Settings (per user): themes[] { id,name,colorHex,colorToken?,isDefault? }, defaultThemeId, highContrastMode
UI State (per user): plannerRowExpansion; plannerVisibleSprints; vizZoomLevel; vizVisibleThemes[]; vizCollapsedGoals[]
Sub-goals: id; goalId; title; description?; order|rank
Routines: routines; routine_items; routine_logs
Audit Logs (staging): audit_logs for structured write/update trails
weekly_goal_time: per-week per-goal rollup as specified above

Indexes: ensure all listed above exist before enabling features.

Security rules: owner-based for new collections; deny test_login_tokens in prod; verify calendar googleEventId ownership; read-only share links for viz; weekly_goal_time read by owner.

————————————————————————————————————————
10) UI Mock Plan (Scaffold First, Then Wire)

Global Navigation (left sidebar)
• Home
• Goals
– Modern Table (default)
– Card View
– Visualization (roadmap)  ← new
• Stories
– Modern Table
• Tasks
– Modern Table
• Sprints
– Current Sprint Kanban
– Sprint Planner (2-D)
• Calendar
– Week/Day (GCal-style grid)
• Routines & Chores
• Analytics
– Activity Stream
– Time Allocation (weekly_goal_time)
• Settings
– Theme Settings
– Integrations
– Work Hours (future)

Top-level UX standards for mocks
• Side-panels for entity details across all modules (consistent tabs: Details, Activity, Comments).
• Inline editors save on Enter; optimistic UI; undo toast; error toast with retry.
• DnD behaviors consistent (mouse/touch/keyboard).
• Theme colours via useThemeColor; AA contrast enforced.
• ?debug=db toggle icon in header opens Dev Console Drawer for structured logs.

Mock each screen with:
• Header actions, filters, search, table columns, cards, and empty/error states.
• Navigation routes registered, even before data is wired.

Component inventory to scaffold
• Tables: GoalsTable, StoriesTable, TasksTable (modern, virtualized)
• Boards: CurrentSprintKanban, SprintPlannerMatrix
• Calendar: CalendarWeekGrid, CalendarDayGrid, CalendarBlockEditor
• Visualization: GoalVizPage, GoalTimelineGrid, GoalBar, SprintMarkers, LinkedStoriesTable, LinkedTasksTable, ConfirmSprintChangesModal, ShareLinkDialog
• Goals Table enhancement: AllocatedHoursCell, AllocatedPercentCell, WeeklyBreakdownPanel
• Side-panels: GoalSidePanel, StorySidePanel, TaskSidePanel (tabs: Details, Activity, Comments)
• Logging: DevConsoleDrawer (?debug=db)
• Common: useThemeColor, useDnD, useEnterToSave, ActivityBuilder, DbLog utilities

Routing map (examples)
• /goals (table), /goals/cards, /goals/visualization
• /stories, /tasks
• /sprints/kanban, /sprints/planner
• /calendar/week, /calendar/day
• /routines
• /analytics/activity, /analytics/time
• /settings/theme, /settings/integrations

Mock content rules
• Use skeleton rows/cards; sample chips/badges; placeholder charts for activity/time.
• Hook up minimal local state to demonstrate UX flows; no Firestore required for mocks.
• Once UI accepted, flip feature flags to wire live Firestore listeners and mutations.

————————————————————————————————————————
11) Developer Tasks (v3.1.1 Fix + v3.4 Build)

Immediate P1 repairs (order)
	1.	Activity Stream: normalise payload (ref/referenceNumber), add validator, debounce writes, throttle errors; fix useActivityTracking.ts + ActivityStreamService.ts; add tests.
	2.	Listeners: ensure Goals/Stories/Tasks tables and Kanban/Planner subscribe with correct where/orderBy (rank), and bind ref/themeId/rankByCell.
	3.	Reinstate side-panel CRUD; Enter-to-save everywhere.
	4.	Sprint spinner: add missing index; dedupe listeners; show empty state.
	5.	createStory(goalId) writes goalId/ref/rank + activity_stream.story_created; surface in UI instantly.
	6.	Notes persistence/rendering: standardize notes path; verify rules; subscribe and render.

New work (v3.4)
7. Goals Table enhancement: weekly_goal_time rollups, new columns (Allocated, %), weekly breakdown side-panel.
8. Goal Visualization module per spec (timeline, sprint overlays, tables, confirmation, share/print).
9. Calendar grid: continue UI; ensure block CRUD; theme colours; deep links to entities.
10. Routines/Chores basics in UI; daily/weekly logging and streak.
11. Enhanced Logging drawer (?debug=db) visible, with filters and copy.
12. Tests: unit/integration/E2E + performance budgets.

————————————————————————————————————————
12) Testing & CI

Unit
• Activity payload schema validation; fallback ref generation
• Rank math (fractional insertion, precision guards)
• Date → sprint mapping logic
• Enter-to-save handlers

Integration
• create/edit/delete flows write activity and render changes
• Listener lifecycle: listen_open → snapshot; error paths logged with query fingerprint
• Goals Table allocation: block edit → rollup update → table refresh
• Visualization: goal drag → affected stories compute → confirmation → batch update

E2E
• Goal → Story → Task CRUD across table + boards + planner → reflects in Visualization
• Inline edits save on Enter; undo toast; errors handled
• Calendar block CRUD; reassign to Goal/Story; subTheme edits; Google round-trip visible
• Share link read-only for Visualization; Print outputs legible A3

Performance
• Load: ≤ 3s for 100+ goals, 600+ stories, 2k+ tasks
• DnD perceived latency ≤ 200 ms; write ack ≤ 250 ms median
• Rollup update visible ≤ 3 s

Accessibility
• Keyboard DnD parity; focus states; ARIA labels
• AA contrast checks in CI

————————————————————————————————————————
13) AO Prompt (copy/paste to the reviewing/build agent)

Review the BOB codebase against this Master Handoff (v3.1.1 → v3.4).
First, fix P1 defects:
• Repair activity_stream write failures (referenceNumber/ref mismatch, validation, debouncing, log throttling).
• Make Goals/Stories/Tasks tables and boards reflect Firestore in real time (correct listeners + ordering).
• Reinstate side-panel CRUD; implement Enter-to-save everywhere.
• Resolve sprint spinner (create missing index; dedupe listeners; empty state).
• Fix createStory(goalId) to persist goalId/ref/rank, log story_created, and appear in all views.
• Standardize notes persistence and rendering.

Then, scaffold the full UI per “UI Mock Plan” (routes, screens, side-panels, tables, boards, calendar, visualization).
Once mocks are accepted, wire Firestore listeners and mutations module by module.
Build v3.4 features: Goals Table time allocation (weekly_goal_time rollups), and Goal Visualization (timeline + sprint overlays, confirmation modal, stories/tasks tables, share + print).
Ensure all changes are logged to Activity Stream (canonical ref, no undefineds).
Hit performance and accessibility budgets.
Deliver: list of fixed files, added indexes/rules, migration/backfill scripts, updated tests (unit/integration/E2E), and screenshots/GIFs of mocks + wired flows.

————————————————————————————————————————
14) Conclusion

This single document contains every requirement, defect, enhancement, schema delta, and the complete UI mock plan. Scaffold the UI first (menu items and screens for everything here), then plumb in Firestore. Keep logs loud in dev via ?debug=db and quiet in prod. This will take us from a stable v3.1.1 to the v3.4 roadmap with capacity visibility and a clear, printable, shareable Goal Visualization.
